/**
 * <h1>CPPError</h1>
 *
 * <p>CPP translation errors.</p>
 *
 * <p>Copyright (c) 2017 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 */
#ifndef WCI_FRONTEND_CPP_CPPERROR_H_
#define WCI_FRONTEND_CPP_CPPERROR_H_

#include <string>
#include <map>

namespace wci { namespace frontend { namespace CPP {

using namespace std;

/**
 * CPP error codes.
 */
enum class CPPErrorCode
{
    ALREADY_FORWARDED,
    CASE_CONSTANT_REUSED,
    IDENTIFIER_REDEFINED,
    IDENTIFIER_UNDEFINED,
    INCOMPATIBLE_ASSIGNMENT,
    INCOMPATIBLE_TYPES,
    INVALID_ASSIGNMENT,
    INVALID_CHARACTER,
    INVALID_CONSTANT,
    INVALID_EXPONENT,
    INVALID_EXPRESSION,
    INVALID_FIELD,
    INVALID_FRACTION,
    INVALID_IDENTIFIER_USAGE,
    INVALID_INDEX_TYPE,
    INVALID_NUMBER,
    INVALID_STATEMENT,
    INVALID_SUBRANGE_TYPE,
    INVALID_TARGET,
    INVALID_TYPE,
    INVALID_VAR_PARM,
    MIN_GT_MAX,
    MISSING_BEGIN,
    MISSING_COLON,
    MISSING_COLON_EQUALS,
    MISSING_COMMA,
    MISSING_CONSTANT,
    MISSING_DO,
    MISSING_DOT_DOT,
    MISSING_END,
    MISSING_EQUALS,
    MISSING_FOR_CONTROL,
    MISSING_IDENTIFIER,
    MISSING_LEFT_BRACKET,
    MISSING_OF,
    MISSING_PERIOD,
    MISSING_PROGRAM,
    MISSING_RIGHT_BRACKET,
    MISSING_RIGHT_PAREN,
    MISSING_SEMICOLON,
    MISSING_THEN,
    MISSING_TO_DOWNTO,
    MISSING_UNTIL,
    MISSING_VARIABLE,
    NOT_CONSTANT_IDENTIFIER,
    NOT_RECORD_VARIABLE,
    NOT_TYPE_IDENTIFIER,
    RANGE_INTEGER,
    RANGE_REAL,
    STACK_OVERFLOW,
    TOO_MANY_LEVELS,
    TOO_MANY_SUBSCRIPTS,
    UNEXPECTED_EOF,
    UNEXPECTED_TOKEN,
    UNIMPLEMENTED,
    UNRECOGNIZABLE,
    WRONG_NUMBER_OF_PARMS,

    // Fatal errors.
    IO_ERROR,
    TOO_MANY_ERRORS
};

constexpr CPPErrorCode ALREADY_FORWARDED = CPPErrorCode::ALREADY_FORWARDED;
constexpr CPPErrorCode CASE_CONSTANT_REUSED = CPPErrorCode::CASE_CONSTANT_REUSED;
constexpr CPPErrorCode IDENTIFIER_REDEFINED = CPPErrorCode::IDENTIFIER_REDEFINED;
constexpr CPPErrorCode IDENTIFIER_UNDEFINED = CPPErrorCode::IDENTIFIER_UNDEFINED;
constexpr CPPErrorCode INCOMPATIBLE_ASSIGNMENT = CPPErrorCode::INCOMPATIBLE_ASSIGNMENT;
constexpr CPPErrorCode INCOMPATIBLE_TYPES = CPPErrorCode::INCOMPATIBLE_TYPES;
constexpr CPPErrorCode INVALID_ASSIGNMENT = CPPErrorCode::INVALID_ASSIGNMENT;
constexpr CPPErrorCode INVALID_CHARACTER = CPPErrorCode::INVALID_CHARACTER;
constexpr CPPErrorCode INVALID_CONSTANT = CPPErrorCode::INVALID_CONSTANT;
constexpr CPPErrorCode INVALID_EXPONENT = CPPErrorCode::INVALID_EXPONENT;
constexpr CPPErrorCode INVALID_EXPRESSION = CPPErrorCode::INVALID_EXPRESSION;
constexpr CPPErrorCode INVALID_FIELD = CPPErrorCode::INVALID_FIELD;
constexpr CPPErrorCode INVALID_FRACTION = CPPErrorCode::INVALID_FRACTION;
constexpr CPPErrorCode INVALID_IDENTIFIER_USAGE = CPPErrorCode::INVALID_IDENTIFIER_USAGE;
constexpr CPPErrorCode INVALID_INDEX_TYPE = CPPErrorCode::INVALID_INDEX_TYPE;
constexpr CPPErrorCode INVALID_NUMBER = CPPErrorCode::INVALID_NUMBER;
constexpr CPPErrorCode INVALID_STATEMENT = CPPErrorCode::INVALID_STATEMENT;
constexpr CPPErrorCode INVALID_SUBRANGE_TYPE = CPPErrorCode::INVALID_SUBRANGE_TYPE;
constexpr CPPErrorCode INVALID_TARGET = CPPErrorCode::INVALID_TARGET;
constexpr CPPErrorCode INVALID_TYPE = CPPErrorCode::INVALID_TYPE;
constexpr CPPErrorCode INVALID_VAR_PARM = CPPErrorCode::INVALID_VAR_PARM;
constexpr CPPErrorCode MIN_GT_MAX = CPPErrorCode::MIN_GT_MAX;
constexpr CPPErrorCode MISSING_BEGIN = CPPErrorCode::MISSING_BEGIN;
constexpr CPPErrorCode MISSING_COLON = CPPErrorCode::MISSING_COLON;
constexpr CPPErrorCode MISSING_COMMA = CPPErrorCode::MISSING_COMMA;
constexpr CPPErrorCode MISSING_CONSTANT = CPPErrorCode::MISSING_CONSTANT;
constexpr CPPErrorCode MISSING_DO = CPPErrorCode::MISSING_DO;
constexpr CPPErrorCode MISSING_DOT_DOT = CPPErrorCode::MISSING_DOT_DOT;
constexpr CPPErrorCode MISSING_END = CPPErrorCode::MISSING_END;
constexpr CPPErrorCode MISSING_EQUALS = CPPErrorCode::MISSING_EQUALS;
constexpr CPPErrorCode MISSING_COLON_EQUALS = CPPErrorCode::MISSING_COLON_EQUALS;
constexpr CPPErrorCode MISSING_FOR_CONTROL = CPPErrorCode::MISSING_FOR_CONTROL;
constexpr CPPErrorCode MISSING_IDENTIFIER = CPPErrorCode::MISSING_IDENTIFIER;
constexpr CPPErrorCode MISSING_LEFT_BRACKET = CPPErrorCode::MISSING_LEFT_BRACKET;
constexpr CPPErrorCode MISSING_OF = CPPErrorCode::MISSING_OF;
constexpr CPPErrorCode MISSING_PERIOD = CPPErrorCode::MISSING_PERIOD;
constexpr CPPErrorCode MISSING_PROGRAM = CPPErrorCode::MISSING_PROGRAM;
constexpr CPPErrorCode MISSING_RIGHT_BRACKET = CPPErrorCode::MISSING_RIGHT_BRACKET;
constexpr CPPErrorCode MISSING_RIGHT_PAREN = CPPErrorCode::MISSING_RIGHT_PAREN;
constexpr CPPErrorCode MISSING_SEMICOLON = CPPErrorCode::MISSING_SEMICOLON;
constexpr CPPErrorCode MISSING_THEN = CPPErrorCode::MISSING_THEN;
constexpr CPPErrorCode MISSING_TO_DOWNTO = CPPErrorCode::MISSING_TO_DOWNTO;
constexpr CPPErrorCode MISSING_UNTIL = CPPErrorCode::MISSING_UNTIL;
constexpr CPPErrorCode MISSING_VARIABLE = CPPErrorCode::MISSING_VARIABLE;
constexpr CPPErrorCode NOT_CONSTANT_IDENTIFIER = CPPErrorCode::NOT_CONSTANT_IDENTIFIER;
constexpr CPPErrorCode NOT_RECORD_VARIABLE = CPPErrorCode::NOT_RECORD_VARIABLE;
constexpr CPPErrorCode NOT_TYPE_IDENTIFIER = CPPErrorCode::NOT_TYPE_IDENTIFIER;
constexpr CPPErrorCode RANGE_INTEGER = CPPErrorCode::RANGE_INTEGER;
constexpr CPPErrorCode RANGE_REAL = CPPErrorCode::RANGE_REAL;
constexpr CPPErrorCode STACK_OVERFLOW = CPPErrorCode::STACK_OVERFLOW;
constexpr CPPErrorCode TOO_MANY_LEVELS = CPPErrorCode::TOO_MANY_LEVELS;
constexpr CPPErrorCode TOO_MANY_SUBSCRIPTS = CPPErrorCode::TOO_MANY_SUBSCRIPTS;
constexpr CPPErrorCode UNEXPECTED_EOF = CPPErrorCode::UNEXPECTED_EOF;
constexpr CPPErrorCode UNEXPECTED_TOKEN = CPPErrorCode::UNEXPECTED_TOKEN;
constexpr CPPErrorCode UNIMPLEMENTED = CPPErrorCode::UNIMPLEMENTED;
constexpr CPPErrorCode UNRECOGNIZABLE = CPPErrorCode::UNRECOGNIZABLE;
constexpr CPPErrorCode WRONG_NUMBER_OF_PARMS = CPPErrorCode::WRONG_NUMBER_OF_PARMS;

constexpr CPPErrorCode IO_ERROR = CPPErrorCode::IO_ERROR;
constexpr CPPErrorCode TOO_MANY_ERRORS = CPPErrorCode::TOO_MANY_ERRORS;

class CPPError
{
public:
    static map<CPPErrorCode, string> SYNTAX_ERROR_MESSAGES;

    /**
     * Initialize the static map.
     */
    static void initialize();

private:
    static bool INITIALIZED;
};

}}}  // namespace wci::frontend::CPP

#endif /* WCI_FRONTEND_CPP_CPPERROR_H_ */
